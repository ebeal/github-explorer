{"version":3,"sources":["OrgSearch.js","CommitItem.js","RepoListItem.js","RepoList.js","App.js","serviceWorker.js","index.js"],"names":["OrgSearch","handleChange","event","props","textChange","className","onChange","this","placeholder","PureComponent","dayjs","extend","relativeTime","CommitItem","commitInfo","icon","GitCommit","verticalAlign","commit","message","author","name","date","fromNow","RepoListItem","toggleOpen","state","open","setState","commitList","loading","url","URL","org","item","fetch","then","res","json","result","length","error","console","log","finally","onClick","Repo","IssueOpened","open_issues","Eye","watchers","Star","stargazers_count","Pulse","pushed_at","map","key","node_id","RepoList","repos","id","App","handleSearchChange","target","value","search","URLSearchParams","type","sort","MarkGithub","size","LogoGithub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b8c9a576.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class OrgSearch extends PureComponent {\n  static propTypes = {\n    textChange: PropTypes.func\n  };\n\n  // This is called when there is typing in the input\n  handleChange = event => {\n    this.props.textChange(event);\n  };\n\n  render() {\n    return (\n      <div className=\"search-input\">\n        <div>\n          <input onChange={this.handleChange} placeholder=\"Enter an organization to see their repositories\"/>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Octicon, { GitCommit } from \"@primer/octicons-react\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\ndayjs.extend(relativeTime);\n\nexport default class CommitItem extends PureComponent {\n  static propTypes = {\n    commitInfo: PropTypes.object\n  };\n\n  render() {\n    // This renders the individual commit, it formats the date using the relative time function\n    // The most recent date for commits does not line up with the repository updated or pushed dates always\n    // This is rendered in a sentence format, it may not be the most scannable format but I think works here\n    const { commitInfo } = this.props;\n    return (\n      <div className=\"commit-item\">\n        <div className=\"commit-message\">\n          <Octicon icon={GitCommit} verticalAlign=\"middle\" /> <span className=\"list-cell-value\">{commitInfo.commit.message}</span>\n        </div>\n        <div className=\"commit-author\">Committed by {commitInfo.commit.author.name}</div>\n        <div className=\"time\">{dayjs(commitInfo.commit.author.date).fromNow()}</div>\n      </div>\n    )\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport Octicon, { Repo, Star, Pulse, IssueOpened, Eye } from \"@primer/octicons-react\";\nimport CommitItem from './CommitItem';\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\ndayjs.extend(relativeTime);\n\n\nexport default class RepoListItem extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      commitList: null,\n      loading: false\n    };\n  }\n\n  // This function is called when the user clicks on a repo\n  toggleOpen = () => {\n    const currentState = this.state.open;\n    // The repo list item is closed\n    if (!currentState) {\n      // If we already have the commit list from a previous call, just open the view\n      if (this.state.commitList) {\n        this.setState({ open: true })\n      // If we aren't already loading get the commits, this prevents duplicate calls\n      } else if (!this.state.loading) {\n        // well if we weren't loading we are now\n        this.setState({ loading: true });\n\n        // The org property is passed from the app component through to here to be used in this call\n        let url = new URL(`https://api.github.com/repos/${this.props.org}/${this.props.item.name}/commits`)\n        fetch(url)\n          .then(res => res.json())\n          .then(\n            (result) => {\n              // If we have commits returned, set the state and open the list\n              if (result.length) {\n                this.setState({ commitList: result, open: true })\n              }\n            },\n            (error) => {\n              console.log(error)\n            }\n        ).finally(() => {\n          // We're done here finish loading\n          this.setState({ loading: false });\n        })\n      }\n    } else {\n      // The list is already opened, close it\n      this.setState({ open: false });\n    }\n  };\n\n  render() {\n    const { item } = this.props;\n    // This is the repo template, it has a nested commit list\n    return (\n      <div onClick={this.toggleOpen} className=\"list-item\">\n        <li>\n          <span className=\"list-cell repo-name\"><Octicon icon={Repo} /> <span className=\"list-cell-value\">{item.name}</span></span>\n          <span className=\"list-cell\"><Octicon icon={IssueOpened} /> <span className=\"list-cell-value\">{item.open_issues}</span></span>\n          <span className=\"list-cell\"><Octicon icon={Eye} /> <span className=\"list-cell-value\">{item.watchers}</span></span>\n          <span className=\"list-cell\"><Octicon icon={Star} /> <span className=\"list-cell-value\">{item.stargazers_count}</span></span>\n          <span className=\"list-cell pulse\"><Octicon icon={Pulse} /> <span className=\"list-cell-value\">{dayjs(item.pushed_at).fromNow()}</span></span>\n        </li>\n        {/* simple loading state */}\n        {this.state.loading && (<div className=\"loading-message\">Loading...</div>)}\n        {this.state.open &&\n          this.state.commitList.map(commit => (\n            <CommitItem commitInfo={commit} key={commit.node_id}></CommitItem>\n          ))\n        }\n      </div>\n    )\n  };\n}\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RepoListItem from \"./RepoListItem\";\n\nexport default class RepoList extends PureComponent {\n  static propTypes = {\n    repos: PropTypes.array,\n    org: PropTypes.string\n  };\n\n  // This is rendered when we've got search results\n  render() {\n    const { repos, org } = this.props;\n    // if repos is set but empty show empty case\n    if (repos && repos.length === 0) {\n      return (<div className=\"repo-list\"><ul><li className=\"list-item\">No repositories for this organization</li></ul></div>);\n    } else if (repos) {\n      // map the list of repos to the repo list items\n      return (\n        <div className=\"repo-list\">\n          <ul>\n            {repos.map(item => (\n              <RepoListItem item={item}  key={item.id} org={org}></RepoListItem>\n            ))}\n          </ul>\n        </div>\n      );\n    } else {\n      // there's no text in the search input, show nothing\n      return (null);\n    }\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport './App.css';\nimport OrgSearch from './OrgSearch';\nimport RepoList from './RepoList';\nimport Octicon, { LogoGithub, MarkGithub } from '@primer/octicons-react';\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repos: null,\n      org: null\n    };\n  }\n\n  // This does the majority of the work for fetching and filtering the repos\n  // Called in OrgSearch when the user types anything\n  // This should be debounced\n  handleSearchChange = event => {\n    const org = event.target.value;\n    // if the user has typed something\n    if (org !== '') {\n      // build the url for the given org\n      let url = new URL(`https://api.github.com/orgs/${org}/repos`);\n      url.search = new URLSearchParams({\n        type: \"sources\",\n        sort: \"pushed\"\n      });\n\n      //call the fetch with the constructed params\n      fetch(url)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            // if the result has a message property this call failed\n            // we should still set the org but we clear the repos\n            if (result.message) {\n              this.setState({\n                repos: [],\n                org: org\n              });\n            } else {\n              // we've got results set the repo and org state with the results\n              this.setState({\n                repos: result,\n                org: org\n              });\n            }\n          },\n          (error) => {\n            // something went wrong log it and clear the repos\n            console.log(error)\n            this.setState({\n              repos: null,\n              org: org\n            });\n          }\n        )\n    } else {\n      // no user input, reset repos to null\n      this.setState({\n        repos: null,\n        org: org\n      });\n    }\n  };\n\n  render() {\n    const { repos, org } = this.state;\n    return (\n      <div className=\"main-content\">\n        <h1>\n          {/* These are the github icons, these were very easy to use */}\n          <Octicon className=\"header-icon\" icon={MarkGithub} size='medium' />\n          <Octicon className=\"header-icon\" icon={LogoGithub} size='medium' />\n           Repository Explorer\n        </h1>\n        {/* Show the search box and call handle search on change */}\n        <OrgSearch textChange={this.handleSearchChange} />\n        {/* render the list of repos */}\n        <RepoList repos={repos} org={org}></RepoList>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}